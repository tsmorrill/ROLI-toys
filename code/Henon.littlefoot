/*
<metadata description="Random CC"
    details="Uses the Henon chaotic attractor"
    target="Lightpad"
    tags="MIDI;Generator;">
    <groups>
        <group name="CC"    displayName="CC"/>
        <group name="advanced"    displayName="Advanced Features"/>
        <group name="param" displayName="Chaos Parameters" />
    </groups>
    <variables>
        <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" />

        <variable group="advanced" name="XIsPitchBend" displayName="Override X CC With Pitchbend"  type="bool" value="false" />
        <variable group="advanced" name="YIsPressure"  displayName="Override Y CC With Aftertouch" type="bool" value="false" />
        <variable group="advanced" name="TriggerNote"  displayName="Send Note Triggers" type="bool" value="false" />
        <variable group="advanced" name="note"         displayName="Note" type="midiNote" value="C3" />

        <variable group="CC" name="xCC" displayName="X CC" type="int" min="0" max="127" value="1" />
        <variable group="CC" name="yCC" displayName="Y CC" type="int" min="0" max="127" value="7" />

        <variable group="param" name="a" displayName="A" type="float" min="1.0" max="1.5" value="1.4" />
        <variable group="param" name="b" displayName="B" type="float" min="0.0" max="1.0" value="0.3" />
        </variables>
</metadata>
*/

//==============================================================================

// Lookup Table
int msInterval[15];

// Dynamical System
float xCoord, yCoord;

// Play Control
bool playing;
int  sliderX, sliderY, loggedTime;

int colour;

//==============================================================================

void initParams()
{
    colour = makeARGB(255, getRandomInt(256), getRandomInt(256), getRandomInt(256));
    xCoord = 4*(getRandomFloat() - 0.5);
    yCoord =   (getRandomFloat() - 0.5);
}

void initialise()
{
    clearDisplay();
    sliderX = 7;
    initParams();

    for (int i = 0; i < 15; ++i)
    {
        msInterval[i] = 0 + 45*(14 - i);
    }
}

//==============================================================================

bool waitedLongEnough()
{
    int t = getMillisecondCounter();
    if (t - loggedTime >= msInterval[sliderX])
    {
        loggedTime = t;
        return true
    }
    return false
}

void repaint()
{
    if (playing)
    {
        if (waitedLongEnough())
        {
            blendRect(0x10000000, 0, 0, 15, 15);

            float buffer = xCoord;

            xCoord = 1 - a*xCoord*xCoord + yCoord;
            yCoord = b*buffer;

            if (!(-2 <= xCoord && xCoord<= 2 && -0.5 <= yCoord && yCoord <= 0.5))
            {
                initParams();
            }

            float tempX = map(xCoord, -2.0, 2.0, 0.0, XIsPitchBend ? 16384.0 : 128.0);
            float tempY = map(yCoord, -0.5, 0.5, 0.0, 128.0);

            if (XIsPitchBend)
            {
                sendPitchBend(channel - 1, int (tempX));
            }
            else
            {
                sendCC(channel - 1, xCC, int (tempX));
            }

            if (YIsPressure)
            {
                sendChannelPressure(channel - 1, int (tempY));
            }
            else
            {
                sendCC(channel - 1, yCC, int (tempY));
            }

            if (TriggerNote)
            {
                sendNoteOn(channel-1, note, int (tempY));
            }

            tempX = map(xCoord, -2.0, 2.0, 0.0, 14.0);
            tempY = map(yCoord, -0.5, 0.5, 0.0, 14.0);

            blendCircle(colour, tempX, 14 - tempY, 0.0, true);          // correct for orientation

            if (TriggerNote)
            {
                sendNoteOff(channel - 1, note, 0);
            }
        }
    }
}

//==============================================================================

void handleButtonDown (int index)
{
    playing = ! playing;
    if (! playing && XIsPitchBend)
    {
        sendPitchBend(channel -1 , 8192);
        if (TriggerNote)
        {
            sendNoteOff(channel - 1, note, 0);
        }
    }
}

void touchStart (int index, float x, float y, float z, float vz)
{
    if (index == 1)
    {
        sliderX = int ((map(x, 0.0, 1.9, 0.15, 4.7)) * 3);
    }
}

void touchMove (int index, float x, float y, float z, float vz)
{
    if (index == 1)
    {
        sliderX = int ((map(x, 0.0, 1.9, 0.15, 4.7)) * 3);
    }
}
