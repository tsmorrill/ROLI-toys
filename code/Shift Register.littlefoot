/*
<metadata description="Bit Shift Register"
    details="Based on the Turing Machine module by Tom Whitwell."
    target="Lightpad"
    tags="MIDI;Generator;">
    <variables>
        <variable name="fixedVelocity" displayName="Fixed Velocity"   type="bool"   value="false" />
        <variable name="pitchBendMode" displayName="Pitchbend Mode"   type="bool"   value="true" />
    </variables>
</metadata>
*/

//==============================================================================

// Lookup Tables
int   msInterval[15];
float probability[15];

// Clock
int  loggedTime;
bool playing;

// Shift Register
int buffer, register;

// MIDI
int noteNumber, velocity;

// UI
bool probSliderActive, speedSliderActive;
int  probSliderX, speedSliderX, litButton;

// Display
int line, randHeight;

//==============================================================================

void scrambleMemory()
{
    for (int i = 0; i < 15; ++i)
    {
        msInterval[i] = 0 + 45*(14-i);
        probability[i] = i/14.0;
    }
}

void initialise()
{
    clearDisplay();
    sendAllNotesOff();
    velocity = 127;

    playing = false;

    scrambleMemory();

    probSliderX = 0;
    speedSliderX = 7;

    register = getRandomInt(1<<16);
    line = 0;
}

void sendAllNotesOff()
{
    for (int i = 0; i<128; ++i)
    {
        sendNoteOff(0, i, 0);
    }
    if (pitchBendMode)
    {
        sendPitchBend(0, 8192);
    }
}

//==============================================================================

void drawBits(int rgb, int value, int offset)
{
        for (int i = 0; i < 8; ++ i)
        {
            if ((value & 1<<i) > 0)
            {
                fillPixel(rgb, 14 - i - offset, line);
            }
        }
}

void print()
{
    if (! fixedVelocity)
    {
        fillRect (0x000000, 0, line, 7, 1);
        drawBits(0x000000ff, velocity, 8);
    }
    fillRect (0x000000, 8, line, 7, 1);
    drawBits(0x00ff00, noteNumber, 0);

    line = (line + 1) % 7;

    if (! fixedVelocity)
    {
        fillRect (0x080000, 0, line, 7, 1);
    }
    fillRect (0x080000, 8, line, 7, 1);
}

void update()
{
    sendNoteOff(0, noteNumber, velocity);

    buffer = register % 2;
    if (getRandomFloat() < probability[probSliderX])
    {
        buffer = 1 - buffer;
    }
    register >>= 1;
    register += buffer << 15;

    noteNumber = register % 128;
    velocity = (fixedVelocity ? 127 : (register >> 8) % 128);

    if (pitchBendMode)
    {
        sendPitchBend(0, noteNumber << 7);
    }

    sendNoteOn(0, (pitchBendMode ? 60 : noteNumber), velocity);

    print();
}

//==============================================================================

bool waitedLongEnough()
{
    int t = getMillisecondCounter();
    if (t - loggedTime >= msInterval[speedSliderX])
    {
        loggedTime = t;
        return true
    }
    return false
}

void repaint()
{
    if (playing)
    {
        if (waitedLongEnough())
        {
            update();
        }
    }

    // clear sliders
    fillRect(0x000000, 0, 8, 15, 7);

    // draw sliders
    fillRect(0x080800, 0,            9,  15, 1);
    fillRect(0x808000, probSliderX,  8,  1, 3);
    fillRect(0x080808, 0,            13, 15, 1);
    fillRect(0x808080, speedSliderX, 12,  1, 3);
}

//==============================================================================

void handleButtonDown(int index)
{
    playing = ! playing;
    if (playing)
    {
        loggedTime = getMillisecondCounter();
        update();
    }
    else
    {
        sendAllNotesOff();
    }
}

//==============================================================================

int convertPositionToPixel (float pos)              // copied from pselodux
{
    return int ((map(pos, 0.0, 1.9, 0.15, 4.7)) * 3);
}

void touchStart (int index, float x, float y, float z, float vz)
{
	if (index == 1)
    {
        int xPixel = convertPositionToPixel(x);
        int yPixel = convertPositionToPixel(y);

        if (7 < yPixel && yPixel < 11)
        {
            probSliderActive = true;
            probSliderX = xPixel;
        }
        else if (11 < yPixel)
        {
            speedSliderActive = true;
            speedSliderX = xPixel;
        }
    }
}

void touchMove (int index, float x, float y, float z, float vz)
{
	if (index == 1)
    {
        int xPixel = convertPositionToPixel(x);
        int yPixel = convertPositionToPixel(x);

        if (probSliderActive)
        {
            probSliderX = xPixel;
        }
        else if (speedSliderActive)
        {
            speedSliderX = xPixel;
        }
    }
}

void touchEnd (int index, float x, float y, float z, float vz)
{
    if (index == 1)
    {
        probSliderActive = false;
        speedSliderActive = false;
    }
	else if (index == 3)
    {
        scrambleMemory();
    }
}
