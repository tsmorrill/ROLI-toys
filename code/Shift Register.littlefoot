/*
<metadata description="Bit Shift Register"
    details="Based on the Turing Machine module by Tom Whitwell."
    target="Lightpad"
    tags="MIDI;Generator;">
    <variables>
        <variable name="fixedVelocity" displayName="Fixed Velocity"   type="bool"   value="false" />
    </variables>
</metadata>
*/

//==============================================================================

int countdown;
int countdownMax;
int step;

int buffer;
int register;

int noteNumber;
int velocity;

int line;

float probability;

bool playing;

int randHeight;

//==============================================================================

void initialise()
{
    clearDisplay();
    sendAllNotesOff();
    velocity = 127;

    playing = false;
    countdownMax = (1 << 16);
    countdown = countdownMax;
    step = (1 << 14);
    
    register = getRandomInt(1<<16);
    line = 0;
    probability = 0;
}

void sendAllNotesOff()
{
    for (int i = 0; i<128; ++i)
    {
        sendNoteOff(0, i, 0);
    }
}

void handleButtonDown(int index)
{
    playing = ! playing;
    if (playing)
    {
        update();
    }
    else
    {
        sendAllNotesOff();
    }
}

void tick()
{
    countdown -= step;
    countdown = max(countdown, 0);
}

void bits(int argb, int value, int offset)
{
        for (int i = 0; i < 8; ++ i)
        {
            if ((value & 1<<i) > 0)
            {
                fillPixel(argb, 14 - i - offset, line);
            }
        }
}

void print()
{
    if (! fixedVelocity)
    {
        fillRect (0x00000000, 0, line, 7, 1);
    }
    fillRect (0x00000000, 8, line, 7, 1);
    if (! fixedVelocity)
    {
    bits(0x000000ff, velocity, 8);        
    }
    bits(0xffffff00, noteNumber, 0);
    line ++;
    line %= 15;
    if (! fixedVelocity)
    {
        fillRect (0x00200000, 0, line, 7, 1);
    }
    fillRect (0x00200000, 8, line, 7, 1);
}

void update()
{
    sendNoteOff(0, noteNumber, velocity);
    
    buffer = register % 2;
    if (getRandomFloat() < probability)
    {
        buffer = 1 - buffer;
    }
    register >>= 1;
    register += buffer << 15;

    noteNumber = register % 128;
    if (! fixedVelocity)
    {
        velocity = register >> 8;             // visual appeal
        velocity %= 128;
    }
    
    sendNoteOn(0, noteNumber, velocity);
    
    print();
    countdown = countdownMax;
}

void doTouch (int index, float x, float y, float z, float vz)
{
    if (index == 1)
    {
         x = x/2;
         x = max(0.1, min(0.9, x));
         step = int (16*map(x, 0.1, 0.9, float (1<<8), float (1<<14)));
        
         y = (2 - y)/2;
         y = max(0.1, min(0.9, y));
         probability = map(y, 0.1, 0.9);
         if (probability < 0.05)
         {
            probability = 0.0;
         }
         if (probability > 0.95)
         {
            probability = 1.0;
         }
    }
}

void touchStart (int index, float x, float y, float z, float vz)
{
	doTouch (index, x, y, z, vz);
}

void touchMove (int index, float x, float y, float z, float vz)
{
	doTouch (index, x, y, z, vz);
}

void touchEnd (int index, float x, float y, float z, float vz)
{
	if (index == 3)
    {
        initialise();
    }
}

void repaint()
{
    fillRect (0xff000000, 7, 0, 1, 14);
    randHeight = int (probability * 15);
    if (randHeight > 0)
    {
        fillRect (0x00004000, 7, 14 - randHeight + 1, 1, randHeight);        
    }
    if (playing)
    {
        tick();
        if (countdown == 0)
        {
            update();
        }
    }
}